//
// terraform-graph.js: a pile of egregious hacks for
// terraform dependency graph visualizations...
//



//
// old version to demonstrate progress...
//
var svg_activate_old = function(selector, svg_url, json_url) {
	
    var container = d3.select(selector);
    //console.log(selector);
    //console.log(container);

    // **** d3.v4 version
    var categorical = [
{ "name" : "schemeAccent", "n": 8},
{ "name" : "schemeDark2", "n": 8},
{ "name" : "schemePastel2", "n": 8},
{ "name" : "schemeSet2", "n": 8},
{ "name" : "schemeSet1", "n": 9},
{ "name" : "schemePastel1", "n": 9},
{ "name" : "schemeCategory10", "n" : 10},
{ "name" : "schemeSet3", "n" : 12 },
{ "name" : "schemePaired", "n": 12},
{ "name" : "schemeCategory20", "n" : 20 },
{ "name" : "schemeCategory20b", "n" : 20},
{ "name" : "schemeCategory20c", "n" : 20 }		   ]

    var color_scale = d3.scaleOrdinal(d3[categorical[10].name]);

    // wrap color_scale for debugging purposes.
    var color = function(n) {
	var c = color_scale(n);
	//console.log(n + ' ' + c);
	return c;
    }

    // initialize 20-color palette. 
    for (var i = 1; i < 21; i++)
	color(i);


    // **** d3.v4 version
    d3.xml(svg_url, function(error, xml) {
	    container.node()
		.appendChild(document.importNode(xml.documentElement, true));

	    // remove <title>s in svg, graphviz leaves these here and they
	    // trigger useless tooltips.
	    d3.select(selector).selectAll('title').remove();


	    // Obtain the graph description.
	    d3.json(json_url, function(error, data) {
		    var links = data.links;
		    var x_nodes = data.nodes;
		    var svg_nodes = [];
		    var nodes = {};
		    data.nodes.forEach(function(node) {
			    nodes[node['id']] = node;
			    svg_nodes.push(node);
			});

		    // Compute the distinct nodes from the links.
		    links.forEach(function(link) {
			    link.source = nodes[link.source];
			    link.target = nodes[link.target];
			    link.value += 1;
			});
		
		    // Sometimes we have escaped newlines (\n) in
		    // json strings. we want <br> instead for display
		    var replacer = function(key, value) {
			if (typeof value == 'string') {
			    return value.replace(/\n/g, '<br>');
			}
			return value;
		    }

		    //var svg = d3.select(selector).select('svg');
		    var svg = container.select('svg');
		    // setup tooltips
		    var tip = d3.tip()
			.attr('class', 'd3-tip')
			.offset([-10, 0])
			.html(function(d) {
				return "<span style='color:white'>" + d.simple_name + "</span>" + (d.def.length == 0 ? '' : "<p class='explain'>" + JSON.stringify(d.def, replacer, 2) + "</p>");
			    });

		    svg.call(tip);

		    //console.log(svg_nodes)
		    svg.selectAll('g.node')
			.data(svg_nodes, function(d) {
				return (d && d.svg_id) || d3.select(this).attr("id"); 
			    })
			.on('mouseover', tip.show)
			.on('mouseout', tip.hide)
			.on('mousedown', tip.show)
			.attr('fill', function(d) {return color(d.group); })
			.select('polygon')
			.style('fill', (function(d) { 
				    if (d)
					return color(d.group); 
				    else
					return '#000'; }));

		});

	});
		
};

//
// current version, without animation
//
var svg_activate = function(selector, svg_url, json_url) {
	
    var container = d3.select(selector);
    //console.log(selector);
    //console.log(container);

    // **** d3.v4 version
    var categorical = [
{ "name" : "schemeAccent", "n": 8},
{ "name" : "schemeDark2", "n": 8},
{ "name" : "schemePastel2", "n": 8},
{ "name" : "schemeSet2", "n": 8},
{ "name" : "schemeSet1", "n": 9},
{ "name" : "schemePastel1", "n": 9},
{ "name" : "schemeCategory10", "n" : 10},
{ "name" : "schemeSet3", "n" : 12 },
{ "name" : "schemePaired", "n": 12},
{ "name" : "schemeCategory20", "n" : 20 },
{ "name" : "schemeCategory20b", "n" : 20},
{ "name" : "schemeCategory20c", "n" : 20 }		   ]

    var color_scale = d3.scaleOrdinal(d3[categorical[10].name]);

    // wrap color_scale for debugging purposes.
    var color = function(n) {
	var c = color_scale(n);
	//console.log(n + ' ' + c);
	return c;
    }

    var lookup = function(list, key, value) {
	for (var i in list)
	    if (i in list && key in list[i] && list[i][key] == value)
		return list[i];
    }

    // initialize 20-color palette. 
    for (var i = 1; i < 21; i++)
	color(i);

    // **** d3.v4 version
    d3.xml(svg_url, function(error, xml) {
	    container.node()
		.appendChild(document.importNode(xml.documentElement, true));
		
	    // remove <title>s in svg, graphviz leaves these here and they
	    // trigger useless tooltips.
	    d3.select(selector).selectAll('title').remove();


	    // Obtain the graph description.
	    d3.json(json_url, function(error, data) {
		    var links = data.links;
		    var x_nodes = data.nodes;
		    var svg_nodes = [];
		    var nodes = {};
		    data.nodes.forEach(function(node) {
			    nodes[node['id']] = node;
			    svg_nodes.push(node);
			});

		    // Sometimes we have escaped newlines (\n) in
		    // json strings. we want <br> instead for display
		    var replacer = function(key, value) {
			if (typeof value == 'string') {
			    return value.replace(/\n/g, '<br>');
			}
			return value;
		    }
		    
		    // returns <span> elements representing a node's direct children 
		    var child_html = function(d) {
			ret_str = '';
			//console.log(links);
			for (var src in data.links) {
			    //console.log(data.links[src]);
			    if (d.label == links[src].source) {
				var node = lookup(data.nodes, 'label', data.links[src].target);
				ret_str += '<span class="dep" style="background:' + color(node.group) + ';">' + node.simple_name + '</span><br>';
			    }

			}
			//console.log(ret_str);
			return ret_str;
		    }


		    //var svg = d3.select(selector).select('svg');
		    var svg = container.select('svg');
		    // setup tooltips
		    var tip = d3.tip()
			.attr('class', 'd3-tip')
			.offset([-10, 0])
			.html(function(d) {
				return "<span style='background:" + color(d.group) + ";' class='header'>" + d.simple_name + "</span>" + (d.def.length == 0 ?  child_html(d) : "<p class='explain'>" + JSON.stringify(d.def, replacer, 2) + "</p><br>" + child_html(d) );
			    });

		    svg.call(tip);

		    //console.log(svg_nodes)
		    svg.selectAll('g.node')
			.data(svg_nodes, function(d) {
				return (d && d.svg_id) || d3.select(this).attr("id"); 
			    })
			.on('mouseover', tip.show)
			.on('mouseout', tip.hide)
			.on('mousedown', tip.show)
			.attr('fill', function(d) {return color(d.group); })
			.select('polygon')
			.style('fill', (function(d) { 
				    if (d)
					return color(d.group); 
				    else
					return '#000'; }));

		});

	});
		
};

//
// prospective version supporting animations.
//
svg_activate_anim = function(selector, svg_url, json_url) {
	
    var container = d3.select(selector);
    //console.log(selector);
    //console.log(container);

    // **** d3.v4 version
    var categorical = [
{ "name" : "schemeAccent", "n": 8},
{ "name" : "schemeDark2", "n": 8},
{ "name" : "schemePastel2", "n": 8},
{ "name" : "schemeSet2", "n": 8},
{ "name" : "schemeSet1", "n": 9},
{ "name" : "schemePastel1", "n": 9},
{ "name" : "schemeCategory10", "n" : 10},
{ "name" : "schemeSet3", "n" : 12 },
{ "name" : "schemePaired", "n": 12},
{ "name" : "schemeCategory20", "n" : 20 },
{ "name" : "schemeCategory20b", "n" : 20},
{ "name" : "schemeCategory20c", "n" : 20 }		   ]

    var color_scale = d3.scaleOrdinal(d3[categorical[10].name]);

    // wrap color_scale for debugging purposes.
    var color = function(n) {
	var c = color_scale(n);
	//console.log(n + ' ' + c);
	return c;
    }

    var lookup = function(list, key, value) {
	for (var i in list)
	    if (i in list && key in list[i] && list[i][key] == value)
		return list[i];
    }

    // initialize 20-color palette. 
    for (var i = 1; i < 21; i++)
	color(i);

    // **** d3.v4 version
    d3.xml(svg_url, function(error, xml) {
	    container.node()
		.appendChild(document.importNode(xml.documentElement, true));
		
	    // remove <title>s in svg, graphviz leaves these here and they
	    // trigger useless tooltips.
	    d3.select(selector).selectAll('title').remove();


	    // Obtain the graph description.
	    d3.json(json_url, function(error, data) {
		    var links = data.links;
		    var x_nodes = data.nodes;
		    var svg_nodes = [];
		    var nodes = {};
		    data.nodes.forEach(function(node) {
			    nodes[node['id']] = node;
			    svg_nodes.push(node);
			});

		    // Sometimes we have escaped newlines (\n) in
		    // json strings. we want <br> instead for display
		    var replacer = function(key, value) {
			if (typeof value == 'string') {
			    return value.replace(/\n/g, '<br>');
			}
			return value;
		    }
		    
		    // returns <span> elements representing a node's direct children 
		    var child_html = function(d) {
			ret_str = '';
			//console.log(links);
			for (var src in data.links) {
			    //console.log(data.links[src]);
			    if (d.label == links[src].source) {
				var node = lookup(data.nodes, 'label', data.links[src].target);
				ret_str += '<span class="dep" style="background:' + color(node.group) + ';">' + node.simple_name + '</span><br>';
			    }

			}
			//console.log(ret_str);
			return ret_str;
		    }


		    //var svg = d3.select(selector).select('svg');
		    var svg = container.select('svg');
		    // setup tooltips
		    var tip = d3.tip()
			.attr('class', 'd3-tip')
			.offset([-10, 0])
			.html(function(d) {
				return "<span style='background:" + color(d.group) + ";' class='header'>" + d.simple_name + "</span>" + (d.def.length == 0 ?  child_html(d) : "<p class='explain'>" + JSON.stringify(d.def, replacer, 2) + "</p><br>" + child_html(d) );
			    });

		    svg.call(tip);

		    //console.log(svg_nodes)
		    svg.selectAll('g.node')
			.data(svg_nodes, function(d) {
				return (d && d.svg_id) || d3.select(this).attr("id"); 
			    })
			.on('mouseover', tip.show)
			.on('mouseout', tip.hide)
			.on('mousedown', tip.show)
			.attr('fill', function(d) {return color(d.group); })
			.select('polygon')
			.style('fill', (function(d) { 
				    if (d)
					return color(d.group); 
				    else
					return '#000'; }));

		});


	});
		
};